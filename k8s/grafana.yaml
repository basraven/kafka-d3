---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana-claim
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteMany 
  storageClassName: local-storage
  selector:
    matchLabels:
      contenttype: "grafana"
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: grafana
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: grafana
    spec:
      containers:
      - name: grafana
        # image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
        image: grafana/grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/ssl/certs
          name: ca-certificates
          readOnly: true
        - mountPath: /var/lib/grafana
          name: grafana
        env:
        # - name: INFLUXDB_HOST
        #   value: monitoring-influxdb
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
          # The following env variables are required to make Grafana accessible via
          # the kubernetes api-server proxy. On production clusters, we recommend
          # removing these env variables, setup auth for grafana, and expose the grafana
          # service using a LoadBalancer or a public IP.
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_SMTP_ENABLED
          value: "true"
        - name: GF_SMTP_SKIP_VERIFY
          value: "true"
        - name: GF_SMTP_HOST
          value: "email.network:25"
        - name: GF_SMTP_FROM_ADDRESS
          value: "admin@basraven.nl"
        - name: GF_SERVER_ROOT_URL
          # If you're only using the API Server proxy, set this value instead:
          # value: /api/v1/namespaces/monitoring/services/monitoring-grafana/proxy
          value: /
      volumes:
      - name: ca-certificates
        # hostPath:
        #   path: /etc/ssl/certs
        emptyDir: {}
      - name: grafana
        persistentVolumeClaim:
          claimName: grafana-claim
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-grafana
  name: monitoring-grafana
  namespace: monitoring
spec:
  ports:
  - port: 80
    targetPort: 3000
  selector:
    k8s-app: grafana
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: monitoring-grafana-ingress
  namespace: monitoring
spec:
  rules:
  - host: grafana.bas
    http:
      paths:
      - path: /
        backend:
          serviceName: monitoring-grafana
          servicePort: 80
  - host: grafana.thuis
    http:
      paths:
      - path: /
        backend:
          serviceName: monitoring-grafana
          servicePort: 80
  tls:
  - hosts:
    - grafana.bas